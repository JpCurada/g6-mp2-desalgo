

I. Assigned Algorithm

    A. Name of Algorithm:

        0/1 Knapsack Problem (Dynamic Programming + Backtracking)

    B. Pseudocode:

            1. Manually count number_of_items from items list.

            2. Create a 2D table knapsack_table with size (number_of_items + 1) × (capacity + 1)
            and initialize all cells to 0.

            3. Fill the table:
            For each item_index from 1 to number_of_items:
                For each current_capacity from 0 to capacity:
                    If current item fits:
                        Calculate value with item
                        Calculate value without item
                        Store the maximum of the two
                    Else:
                        Copy value from previous item

            4. Recursively backtrack from bottom-right cell:
            If item was included in the optimal value:
                Add to current subset
                Recurse with reduced capacity
            Also recurse without including the item

            5. Collect all valid optimal subsets
            
            6. Return:
            - first valid optimal subset
            - highest total value
            - list of all optimal subsets



    C. Brief Description:

        The 0/1 Knapsack algorithm is used to select the most valuable subset of items that fit within a given weight capacity. 
        This implementation uses dynamic programming to calculate the maximum achievable value and backtracking to list all item combinations that achieve it.

    II. Python Implementation

def knapsack_brute_force(items, capacity):
    """
    Solves the 0/1 Knapsack problem by enumerating all subsets of items.

    Args:
        items (list of tuples): Each tuple contains (name, weight, value).
        capacity (int): Maximum weight capacity.

    Returns:
        tuple:
            best_subset (list): List of item names in the best subset.
            best_value (int): Maximum total value achievable.
            all_valid_subsets (list): All subsets achieving best value, with weights and values.
    """

    # Step 1: Manually count number_of_items
    number_of_items = 0
    while True:
        try:
            _ = items[number_of_items]
            number_of_items += 1
        except IndexError:
            break

    # Step 2: Initialize subset enumeration
    all_subsets = []         # Will store valid subsets with their weight and value
    max_value = 0            # To track the best total value
    subset_index = 0         # Starting subset index
    max_subset_index = 1     # 2^number_of_items total combinations

    # Step 2.1: Compute 2^number_of_items manually
    for _ in range(number_of_items):
        max_subset_index *= 2

    # Step 3: Enumerate all subsets
    while subset_index < max_subset_index:
        subset_weight = 0
        subset_value = 0
        subset_names = []

        # Step 3.1: Check which items are included in this subset
        item_idx = 0
        while item_idx < number_of_items:
            if (subset_index >> item_idx) & 1 == 1:
                item_name, item_weight, item_value = items[item_idx]
                subset_weight += item_weight
                subset_value += item_value
                subset_names.append(item_name)
            item_idx += 1

        # Step 3.2: If valid subset (within capacity), record it
        if subset_weight <= capacity:
            all_subsets.append((subset_names, subset_weight, subset_value))
            if subset_value > max_value:
                max_value = subset_value

        subset_index += 1

    # Step 4: Filter only the best subsets (those with max_value)
    best_subsets = []
    index = 0
    while index < len(all_subsets):
        if all_subsets[index][2] == max_value:
            best_subsets.append(all_subsets[index])
        index += 1

    # Step 5: Select the first optimal subset (if exists)
    best_subset = best_subsets[0][0] if best_subsets else []

    # Step 6: Return results
    return best_subset, max_value, best_subsets


    B. Docstring Example:

    def knapsack_optimize(items, capacity):
    """
    Solves the 0/1 Knapsack problem using dynamic programming and backtracking
    to find all subsets of items that give the maximum value without exceeding capacity.

    Args:
        items (list of tuple): A list where each element is a tuple (value, weight)
                               representing the value and weight of an item.
        capacity (int): The total weight capacity of the knapsack.

    Returns:
        tuple:
            best_subset (list): Indices of the first optimal subset found.
            best_value (int): The maximum total value achievable.
            all_valid_subsets (list of lists): All combinations of indices that achieve the best value.
    """
    # function body

    III. Simulation / Step-by-Step Example

    A. Sample Input:

    items = [(10, 5), (40, 4), (30, 6)] 

    capacity = 10

  B. Step-by-Step Process:

    Item count: 3

    Knapsack capacity: 10

    DP Table size: 4 rows × 11 columns (for 0–3 items, capacity 0–10)

    Filling DP Table:

            Item 1 (weight: 10, value: 5):

            Fits at capacity = 10

            → dp[1][10] = 5

            Item 2 (weight: 40, value: 4):

            Too heavy for all capacities (weight > 10)

            → Table unchanged for this item

            Item 3 (weight: 30, value: 6):

            Also too heavy for all capacities


            C. Backtracking Step:

                    Start from dp[3][10] = 5

                    Compare with dp[2][10] = 5 → no item included

                    Compare with dp[1][10] = 5 → possible inclusion of Item 1

                    Item 1 (value: 5, weight: 10) fits → included

                    Backtrack to dp[0][0]


                    D. Final Output:

                        Best subset: [0] → corresponds to Item 1

                        Best value: 5

                        All valid subsets: [[0]] (only one subset achieves max value)



        IV. Discussion

        A. Implementation Logic:

        The logic follows a clear DP table-based strategy for tracking max values at each weight capacity. 
        The use of manual loops, recursive backtracking, and custom data structures fits the constraint of avoiding built-ins and imports, while still producing all optimal subsets.


        B. References:

        https://youtu.be/qxWu-SeAqe4?si=AO1W1K7zMeg6XN01

        https://youtu.be/gCRw7BIrLPY?si=ZYqkJtxdG4y3z51x

        GitHub Repository: G6-DesAlgorithmists

        C. Possible Improvements / Future Work:

        - Optimize space by using a 1D table if only best value is needed

        - Improve efficiency in subset backtracking (avoid duplicates)

        - Pre-sort items by value-to-weight ratio to prioritize high-efficiency items in dynamic approximation.




